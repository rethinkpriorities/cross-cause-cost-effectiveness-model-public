# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: CI

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  test-python:
    name: Test (pytest)
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      name: Checkout repository

    - name: Install poetry
      run: pipx install poetry

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'poetry'

    - name: Install dependencies
      run: |
        poetry install

    - name: Test with pytest
      run: |
        poetry run pytest -n auto

  lint-python:
    name: "Lint (ruff)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: chartboost/ruff-action@v1

  format-python:
    name: "Format (black)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: psf/black@stable

  typecheck-python:
    name: "Typecheck (pyright)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install

      - run: echo "$(poetry env info --path)/bin" >> $GITHUB_PATH

      - uses: jakebailey/pyright-action@v1
        with:
          version: 1.1.324

  lint-typescript:
    name: "Lint, format, and typecheck (React/TS)"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ccm_react/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ccm_react/package-lock.json'
      - run: npm ci
      - run: npm run lint
      - run: npm run type-check
      - run: npm run format-check
      - run: npm run test

  test-typescript:
    name: "Test (React/TS)"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ccm_react/
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ccm_react/package-lock.json'
      - run: npm ci
      - run: npm run test

  test-e2e:
    name: "Test End to End"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'poetry'

      - name: Install dependencies
        run: |
          poetry install

      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ccm_react/package-lock.json'
      - name: install deps
        working-directory: ./ccm_react
        run: npm ci
      - name: run cypress
        working-directory: ./ccm_react
        run: npm run test-cypress

  generate-client:
    name: "Check if the TS client is up to date"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'poetry'

      - name: Set up Node 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'ccm_react/package-lock.json'

      - name: Install dependencies
        run: |
          poetry install
          cd ccm_react && npm ci && cd ..

      - name: Run the API
        run: poetry run uvicorn ccm_api.main:app &

      - name: Wait for the API to start
        run: |
          while ! nc -z localhost 8000; do
            sleep 0.1
          done

      - name: Generate the client
        run: |
          cd ccm_react && npm run generate-client

      - name: Check if the client is up to date
        run: |
          git diff --exit-code --ignore-all-space --ignore-blank-lines --ignore-cr-at-eol
